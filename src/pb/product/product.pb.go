// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: product.proto

package product

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	paginate "paginate"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProductType int32

const (
	ProductType_MOBILE ProductType = 0
	ProductType_PC     ProductType = 1
	ProductType_Games  ProductType = 2
)

var ProductType_name = map[int32]string{
	0: "MOBILE",
	1: "PC",
	2: "Games",
}

var ProductType_value = map[string]int32{
	"MOBILE": 0,
	"PC":     1,
	"Games":  2,
}

func (x ProductType) String() string {
	return proto.EnumName(ProductType_name, int32(x))
}

func (ProductType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{0}
}

type Product struct {
	ProductId            int64                  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductCode          string                 `protobuf:"bytes,2,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	ProductName          string                 `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Enable               bool                   `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	Description          string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Isdisplay            bool                   `protobuf:"varint,6,opt,name=isdisplay,proto3" json:"isdisplay,omitempty"`
	DisplayFrom          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=display_from,json=displayFrom,proto3" json:"display_from,omitempty"`
	DisplayTo            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=display_to,json=displayTo,proto3" json:"display_to,omitempty"`
	SalesFrom            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=sales_from,json=salesFrom,proto3" json:"sales_from,omitempty"`
	SalesTo              *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=sales_to,json=salesTo,proto3" json:"sales_to,omitempty"`
	IsDraft              bool                   `protobuf:"varint,11,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	CreatedBy            string                 `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedDate          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedBy           string                 `protobuf:"bytes,14,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedDate         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
	ProductType          ProductType            `protobuf:"varint,16,opt,name=product_type,json=productType,proto3,enum=product.service.v1.ProductType" json:"product_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{0}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

type ListProductsRequest struct {
	ProductId            int64                 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductName          string                `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductCode          string                `protobuf:"bytes,3,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	PageOptions          *paginate.PageOptions `protobuf:"bytes,4,opt,name=PageOptions,proto3" json:"PageOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListProductsRequest) Reset()         { *m = ListProductsRequest{} }
func (m *ListProductsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProductsRequest) ProtoMessage()    {}
func (*ListProductsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{1}
}
func (m *ListProductsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProductsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProductsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProductsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProductsRequest.Merge(m, src)
}
func (m *ListProductsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListProductsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProductsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProductsRequest proto.InternalMessageInfo

type ListProductsResponse struct {
	Product              []*Product           `protobuf:"bytes,1,rep,name=product,proto3" json:"product,omitempty"`
	PageResult           *paginate.PageResult `protobuf:"bytes,2,opt,name=PageResult,proto3" json:"PageResult,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListProductsResponse) Reset()         { *m = ListProductsResponse{} }
func (m *ListProductsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProductsResponse) ProtoMessage()    {}
func (*ListProductsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{2}
}
func (m *ListProductsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProductsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProductsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProductsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProductsResponse.Merge(m, src)
}
func (m *ListProductsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListProductsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProductsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProductsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("product.service.v1.ProductType", ProductType_name, ProductType_value)
	proto.RegisterType((*Product)(nil), "product.service.v1.Product")
	proto.RegisterType((*ListProductsRequest)(nil), "product.service.v1.ListProductsRequest")
	proto.RegisterType((*ListProductsResponse)(nil), "product.service.v1.ListProductsResponse")
}

func init() { proto.RegisterFile("product.proto", fileDescriptor_f0fd8b59378f44a5) }

var fileDescriptor_f0fd8b59378f44a5 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xee, 0x26, 0xbf, 0xe6, 0xcf, 0x38, 0xed, 0x2f, 0x5a, 0x10, 0x6c, 0x43, 0x9b, 0x86, 0x08,
	0x09, 0xab, 0x02, 0x47, 0x04, 0xf5, 0x00, 0x08, 0x90, 0xd2, 0x02, 0xaa, 0x54, 0x68, 0x65, 0x72,
	0xe2, 0x12, 0x6d, 0xe2, 0x8d, 0x59, 0x29, 0xf6, 0x1a, 0xef, 0xa6, 0x52, 0xae, 0x5c, 0x90, 0xb8,
	0x72, 0x41, 0x3c, 0x0a, 0x4f, 0xd0, 0x23, 0x88, 0x17, 0x80, 0xc2, 0x83, 0x20, 0xaf, 0xd7, 0xa9,
	0x4b, 0x2b, 0x22, 0x6e, 0x3b, 0xb3, 0xdf, 0x37, 0x33, 0xfb, 0xf9, 0x1b, 0xc3, 0x4a, 0x14, 0x0b,
	0x6f, 0x3a, 0x52, 0x4e, 0x14, 0x0b, 0x25, 0x30, 0xce, 0x42, 0xc9, 0xe2, 0x23, 0x3e, 0x62, 0xce,
	0xd1, 0x9d, 0xc6, 0x6d, 0x9f, 0xab, 0xd7, 0xd3, 0xa1, 0x33, 0x12, 0x41, 0xc7, 0x17, 0xbe, 0xe8,
	0x68, 0xe8, 0x70, 0x3a, 0xd6, 0x91, 0x0e, 0xf4, 0x29, 0x2d, 0xd1, 0x58, 0xf7, 0x85, 0xf0, 0x27,
	0xac, 0x43, 0x23, 0xde, 0xa1, 0x61, 0x28, 0x14, 0x55, 0x5c, 0x84, 0xd2, 0xdc, 0x6e, 0x9a, 0xdb,
	0x79, 0x0d, 0xc5, 0x03, 0x26, 0x15, 0x0d, 0x22, 0x03, 0xb8, 0x1a, 0x51, 0x9f, 0x87, 0x54, 0xb1,
	0x4e, 0x76, 0x48, 0x2f, 0xda, 0x5f, 0x97, 0xa1, 0x7c, 0x98, 0x4e, 0x87, 0x37, 0x00, 0xcc, 0xa0,
	0x03, 0xee, 0x11, 0xd4, 0x42, 0x76, 0xd1, 0xad, 0x9a, 0xcc, 0x9e, 0x87, 0xaf, 0x43, 0x2d, 0xbb,
	0x1e, 0x09, 0x8f, 0x91, 0x42, 0x0b, 0xd9, 0x55, 0xd7, 0x32, 0xb9, 0x1d, 0xe1, 0xb1, 0x3c, 0x24,
	0xa4, 0x01, 0x23, 0xc5, 0x33, 0x90, 0x17, 0x34, 0x60, 0xf8, 0x0a, 0x94, 0x58, 0x48, 0x87, 0x13,
	0x46, 0xfe, 0x6b, 0x21, 0xbb, 0xe2, 0x9a, 0x08, 0xb7, 0xc0, 0xf2, 0x98, 0x1c, 0xc5, 0x3c, 0x4a,
	0x1e, 0x46, 0x96, 0x53, 0x66, 0x2e, 0x85, 0xd7, 0xa1, 0xca, 0xa5, 0xc7, 0x65, 0x34, 0xa1, 0x33,
	0x52, 0xd2, 0xe4, 0xd3, 0x04, 0x7e, 0x08, 0x35, 0x73, 0x1c, 0x8c, 0x63, 0x11, 0x90, 0x72, 0x0b,
	0xd9, 0x56, 0xb7, 0xe1, 0xa4, 0xca, 0x38, 0x99, 0x32, 0x4e, 0x3f, 0x53, 0xc6, 0xb5, 0x0c, 0xfe,
	0x69, 0x2c, 0x02, 0x7c, 0x0f, 0x20, 0xa3, 0x2b, 0x41, 0x2a, 0x0b, 0xc9, 0x55, 0x83, 0xee, 0x8b,
	0x84, 0x2a, 0xe9, 0x84, 0xc9, 0xb4, 0x6f, 0x75, 0x31, 0x55, 0xa3, 0x75, 0xd7, 0x6d, 0xa8, 0xa4,
	0x54, 0x25, 0x08, 0x2c, 0x24, 0x96, 0x35, 0xb6, 0x2f, 0xf0, 0x1a, 0x54, 0xb8, 0x1c, 0x78, 0x31,
	0x1d, 0x2b, 0x62, 0x69, 0x21, 0xca, 0x5c, 0xee, 0x26, 0x61, 0xf2, 0x0d, 0x47, 0x31, 0xa3, 0x8a,
	0x79, 0x83, 0xe1, 0x8c, 0xd4, 0xb4, 0x8a, 0x55, 0x93, 0xe9, 0x69, 0x95, 0xb2, 0x6b, 0x8f, 0x2a,
	0x46, 0x56, 0x16, 0xab, 0x64, 0xf0, 0xbb, 0x54, 0x31, 0xbc, 0x09, 0x56, 0x20, 0x3c, 0x3e, 0xe6,
	0x69, 0xf9, 0x55, 0x5d, 0x1e, 0xb2, 0x54, 0x6f, 0x86, 0x1f, 0xc3, 0xca, 0x1c, 0xa0, 0x1b, 0xfc,
	0xbf, 0xb0, 0x41, 0x2d, 0x23, 0xe8, 0x0e, 0xbd, 0x53, 0x07, 0xa9, 0x59, 0xc4, 0x48, 0xbd, 0x85,
	0xec, 0xd5, 0xee, 0xa6, 0x73, 0x7e, 0x83, 0x1c, 0x63, 0xdb, 0xfe, 0x2c, 0x62, 0x73, 0x8b, 0x25,
	0x41, 0xfb, 0x33, 0x82, 0x4b, 0xfb, 0x5c, 0x2a, 0x03, 0x90, 0x2e, 0x7b, 0x33, 0x65, 0xf2, 0x5f,
	0xfc, 0xad, 0xcd, 0x5b, 0x38, 0x6f, 0xde, 0x3f, 0x57, 0xa0, 0x78, 0x7e, 0x05, 0x1e, 0x81, 0x75,
	0x48, 0x7d, 0x76, 0xa0, 0x3d, 0x2b, 0xb5, 0xc9, 0xad, 0xee, 0x7a, 0xb2, 0xe6, 0x81, 0x08, 0x9d,
	0xf9, 0xf6, 0xe5, 0x30, 0x6e, 0x9e, 0xd0, 0x7e, 0x8f, 0xe0, 0xf2, 0xd9, 0xe1, 0x65, 0x24, 0x42,
	0xc9, 0xf0, 0x36, 0x94, 0x4d, 0x1f, 0x82, 0x5a, 0x45, 0xdb, 0xea, 0x5e, 0xfb, 0x8b, 0x28, 0x6e,
	0x86, 0xc5, 0x0f, 0x00, 0x92, 0xf2, 0x2e, 0x93, 0xd3, 0x89, 0xd2, 0x6f, 0x4a, 0x98, 0x17, 0x8d,
	0x93, 0x42, 0xdc, 0x1c, 0x7c, 0xeb, 0x16, 0x58, 0x39, 0x95, 0x31, 0x40, 0xe9, 0xf9, 0x41, 0x6f,
	0x6f, 0xff, 0x49, 0x7d, 0x09, 0x97, 0xa0, 0x70, 0xb8, 0x53, 0x47, 0xb8, 0x0a, 0xcb, 0xcf, 0x68,
	0xc0, 0x64, 0xbd, 0xd0, 0xfd, 0x84, 0x60, 0xd5, 0xc0, 0x5f, 0xa6, 0x13, 0xe1, 0x77, 0x08, 0x6a,
	0xf9, 0xd7, 0xe0, 0x9b, 0x17, 0x0d, 0x7d, 0xc1, 0xc7, 0x6a, 0xd8, 0x8b, 0x81, 0xa9, 0x30, 0xed,
	0x1b, 0x6f, 0xbf, 0xfd, 0xfa, 0x50, 0x68, 0xb6, 0xd7, 0xf4, 0xcf, 0xd1, 0xb0, 0x3a, 0x13, 0x2e,
	0x95, 0x39, 0xcb, 0xfb, 0x68, 0xab, 0xb7, 0x71, 0xfc, 0xa3, 0xb9, 0x74, 0x7c, 0xd2, 0x44, 0x5f,
	0x4e, 0x9a, 0xe8, 0xfb, 0x49, 0x13, 0x7d, 0xfc, 0xd9, 0x5c, 0x7a, 0x95, 0xc9, 0x34, 0x2c, 0x69,
	0x67, 0xde, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x6a, 0x13, 0x49, 0xba, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServiceClient interface {
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/product.service.v1.ProductService/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
type ProductServiceServer interface {
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
}

// UnimplementedProductServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (*UnimplementedProductServiceServer) ListProducts(ctx context.Context, req *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.v1.ProductService/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.service.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _ProductService_ListProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Product) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProductType != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.ProductType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ModifiedDate != nil {
		{
			size, err := m.ModifiedDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ModifiedBy) > 0 {
		i -= len(m.ModifiedBy)
		copy(dAtA[i:], m.ModifiedBy)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ModifiedBy)))
		i--
		dAtA[i] = 0x72
	}
	if m.CreatedDate != nil {
		{
			size, err := m.CreatedDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x62
	}
	if m.IsDraft {
		i--
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.SalesTo != nil {
		{
			size, err := m.SalesTo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.SalesFrom != nil {
		{
			size, err := m.SalesFrom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DisplayTo != nil {
		{
			size, err := m.DisplayTo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DisplayFrom != nil {
		{
			size, err := m.DisplayFrom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Isdisplay {
		i--
		if m.Isdisplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProductCode) > 0 {
		i -= len(m.ProductCode)
		copy(dAtA[i:], m.ProductCode)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListProductsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProductsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProductsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageOptions != nil {
		{
			size, err := m.PageOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProductCode) > 0 {
		i -= len(m.ProductCode)
		copy(dAtA[i:], m.ProductCode)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListProductsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProductsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProductsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageResult != nil {
		{
			size, err := m.PageResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Product) > 0 {
		for iNdEx := len(m.Product) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Product[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProduct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	offset -= sovProduct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovProduct(uint64(m.ProductId))
	}
	l = len(m.ProductCode)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.Isdisplay {
		n += 2
	}
	if m.DisplayFrom != nil {
		l = m.DisplayFrom.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.DisplayTo != nil {
		l = m.DisplayTo.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.SalesFrom != nil {
		l = m.SalesFrom.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.SalesTo != nil {
		l = m.SalesTo.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.IsDraft {
		n += 2
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.CreatedDate != nil {
		l = m.CreatedDate.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ModifiedBy)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.ModifiedDate != nil {
		l = m.ModifiedDate.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.ProductType != 0 {
		n += 2 + sovProduct(uint64(m.ProductType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListProductsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovProduct(uint64(m.ProductId))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ProductCode)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.PageOptions != nil {
		l = m.PageOptions.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListProductsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Product) > 0 {
		for _, e := range m.Product {
			l = e.Size()
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	if m.PageResult != nil {
		l = m.PageResult.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProduct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isdisplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isdisplay = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayFrom == nil {
				m.DisplayFrom = &timestamppb.Timestamp{}
			}
			if err := m.DisplayFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayTo == nil {
				m.DisplayTo = &timestamppb.Timestamp{}
			}
			if err := m.DisplayTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SalesFrom == nil {
				m.SalesFrom = &timestamppb.Timestamp{}
			}
			if err := m.SalesFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SalesTo == nil {
				m.SalesTo = &timestamppb.Timestamp{}
			}
			if err := m.SalesTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedDate == nil {
				m.CreatedDate = &timestamppb.Timestamp{}
			}
			if err := m.CreatedDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModifiedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModifiedDate == nil {
				m.ModifiedDate = &timestamppb.Timestamp{}
			}
			if err := m.ModifiedDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			m.ProductType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductType |= ProductType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProductsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProductsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProductsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageOptions == nil {
				m.PageOptions = &paginate.PageOptions{}
			}
			if err := m.PageOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProductsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProductsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProductsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = append(m.Product, &Product{})
			if err := m.Product[len(m.Product)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageResult == nil {
				m.PageResult = &paginate.PageResult{}
			}
			if err := m.PageResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProduct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProduct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProduct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProduct = fmt.Errorf("proto: unexpected end of group")
)
